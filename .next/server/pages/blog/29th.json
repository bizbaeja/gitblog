{"pageProps":{"post":{"title":"How to Use ApexChart","date":"2022-12-16T00:00:00.000Z","body":{"raw":"\nyarn 또는 npm을 사용하여 종속성 설치\n\n```tsx\nyarn add apexcharts react-apexcharts\n```\n\n가져오기\n\n```tsx\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\n```\n\n옵션 유형 정의\n\n```tsx\nconst options: ApexOptions = {\n  chart: {\n    height: 350,\n    type: 'line',\n    zoom: {\n      enabled: true\n    }\n  }\n};\n\n<ReactApexChart options={options} series={series} type=\"line\" height={350} />;\n```\n\n---\n\n[적용코드]\n\n```tsx\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchCoinHistory } from '../api';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\n\ninterface IHistorical {\n  time_open: number;\n  time_close: number;\n  open: string;\n  high: string;\n  low: string;\n  close: string;\n  volume: string;\n  market_cap: number;\n}\ninterface ChartProps {\n  coinId: string;\n}\nfunction Chart({ coinId }: ChartProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>(['ohlcv', coinId], () =>\n    fetchCoinHistory(coinId)\n  );\n  const options: ApexOptions = {\n    chart: {\n      height: 350,\n      type: 'line',\n      zoom: {\n        enabled: true\n      }\n    }\n  };\n\n  return (\n    <div>\n      {isLoading ? (\n        'Loading chart...'\n      ) : (\n        <ReactApexChart\n          type=\"line\"\n          series={[\n            {\n              name: 'price',\n              data: data?.map((price) => Number(price.close)) as number[]\n            }\n          ]}\n          options={{\n            theme: {\n              mode: 'dark'\n            },\n            chart: {\n              height: 300,\n              width: 500,\n              toolbar: {\n                show: false\n              },\n              background: 'transparent'\n            },\n            grid: { show: false },\n            stroke: {\n              curve: 'smooth',\n              width: 3\n            },\n            yaxis: {\n              show: false\n            },\n            xaxis: {\n              axisBorder: { show: false },\n              axisTicks: { show: false },\n              labels: { show: false },\n              type: 'datetime',\n              categories: data?.map(\n                (price) => price.time_close * 1000\n              ) as number[]\n            },\n            fill: {\n              type: 'gradient',\n              gradient: { gradientToColors: ['#42f5ad'], stops: [0, 100] }\n            },\n            colors: ['#f3ffad'],\n            tooltip: {\n              y: {\n                formatter: (value) => `$ ${value.toFixed(3)}`\n              }\n            }\n          }}\n        />\n      )}\n    </div>\n  );\n}\nexport default Chart;\n```\n","code":"var Component=(()=>{var l=Object.create;var o=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var u=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),f=(e,n)=>{for(var r in n)o(e,r,{get:n[r],enumerable:!0})},i=(e,n,r,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of m(n))!g.call(e,a)&&a!==r&&o(e,a,{get:()=>n[a],enumerable:!(s=d(n,a))||s.enumerable});return e};var y=(e,n,r)=>(r=e!=null?l(x(e)):{},i(n||!e||!e.__esModule?o(r,\"default\",{value:e,enumerable:!0}):r,e)),C=e=>i(o({},\"__esModule\",{value:!0}),e);var p=u((v,c)=>{c.exports=_jsx_runtime});var A={};f(A,{default:()=>_,frontmatter:()=>b});var t=y(p()),b={title:\"How to Use ApexChart\",date:new Date(16711488e5)};function h(e){let n=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",hr:\"hr\"},e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:\"yarn \\uB610\\uB294 npm\\uC744 \\uC0AC\\uC6A9\\uD558\\uC5EC \\uC885\\uC18D\\uC131 \\uC124\\uCE58\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-tsx\",children:`yarn add apexcharts react-apexcharts\n`})}),`\n`,(0,t.jsx)(n.p,{children:\"\\uAC00\\uC838\\uC624\\uAE30\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-tsx\",children:`import ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\n`})}),`\n`,(0,t.jsx)(n.p,{children:\"\\uC635\\uC158 \\uC720\\uD615 \\uC815\\uC758\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-tsx\",children:`const options: ApexOptions = {\n  chart: {\n    height: 350,\n    type: 'line',\n    zoom: {\n      enabled: true\n    }\n  }\n};\n\n<ReactApexChart options={options} series={series} type=\"line\" height={350} />;\n`})}),`\n`,(0,t.jsx)(n.hr,{}),`\n`,(0,t.jsx)(n.p,{children:\"[\\uC801\\uC6A9\\uCF54\\uB4DC]\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-tsx\",children:`import { useQuery } from '@tanstack/react-query';\nimport { fetchCoinHistory } from '../api';\nimport ReactApexChart from 'react-apexcharts';\nimport { ApexOptions } from 'apexcharts';\n\ninterface IHistorical {\n  time_open: number;\n  time_close: number;\n  open: string;\n  high: string;\n  low: string;\n  close: string;\n  volume: string;\n  market_cap: number;\n}\ninterface ChartProps {\n  coinId: string;\n}\nfunction Chart({ coinId }: ChartProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>(['ohlcv', coinId], () =>\n    fetchCoinHistory(coinId)\n  );\n  const options: ApexOptions = {\n    chart: {\n      height: 350,\n      type: 'line',\n      zoom: {\n        enabled: true\n      }\n    }\n  };\n\n  return (\n    <div>\n      {isLoading ? (\n        'Loading chart...'\n      ) : (\n        <ReactApexChart\n          type=\"line\"\n          series={[\n            {\n              name: 'price',\n              data: data?.map((price) => Number(price.close)) as number[]\n            }\n          ]}\n          options={{\n            theme: {\n              mode: 'dark'\n            },\n            chart: {\n              height: 300,\n              width: 500,\n              toolbar: {\n                show: false\n              },\n              background: 'transparent'\n            },\n            grid: { show: false },\n            stroke: {\n              curve: 'smooth',\n              width: 3\n            },\n            yaxis: {\n              show: false\n            },\n            xaxis: {\n              axisBorder: { show: false },\n              axisTicks: { show: false },\n              labels: { show: false },\n              type: 'datetime',\n              categories: data?.map(\n                (price) => price.time_close * 1000\n              ) as number[]\n            },\n            fill: {\n              type: 'gradient',\n              gradient: { gradientToColors: ['#42f5ad'], stops: [0, 100] }\n            },\n            colors: ['#f3ffad'],\n            tooltip: {\n              y: {\n                formatter: (value) => \\`$ \\${value.toFixed(3)}\\`\n              }\n            }\n          }}\n        />\n      )}\n    </div>\n  );\n}\nexport default Chart;\n`})})]})}function w(e={}){let{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(h,e)})):h(e)}var _=w;return C(A);})();\n;return Component;"},"_id":"29th.mdx","_raw":{"sourceFilePath":"29th.mdx","sourceFileName":"29th.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"29th"},"type":"Post"}},"__N_SSG":true}
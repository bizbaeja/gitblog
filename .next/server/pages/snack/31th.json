{"pageProps":{"snack":{"title":"ContentLayer 설정 및 사용법","date":"2022-12-18T00:00:00.000Z","description":"NextJS / ContentLayer 사용법","body":{"raw":"\n### Contentlayer 란?\n\n| 콘텐츠를 데이터로 변환하여 앱에서 MD(X) 및 CMS 콘텐츠를 매우 쉽게 가져올 수 있음\n\n---\n\n### 자동 설정\n\n- CRA 로 생성시\n\n```css\nnpx create-next-app --example with-contentlayer with-contentlayer-app\n# or\nyarn create next-app --example with-contentlayer with-contentlayer-app\n```\n\n### 수동설정\n\n- 이미 앱이 만들어져 있을 경우\n\n```css\nnpm install contentlayer next-contentlayer\n# or\nyarn add contentlayer next-contentlayer\n```\n\n---\n\n### config 추가하기\n\n- `contentlayer.config.js` 다음 코드를 사용하요 프로젝트의 루트에 파일을 만든다.\n\n```css\n[contentlayer.config.js]\n\nimport { defineDocumentType, makeSource } from \"contentlayer/source-files\";\n\nconst Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `**/*.md`,\n  contentType: \"markdown\",\n  fields: {\n    title: { type: \"string\", required: true },\n    date: { type: \"string\", required: true },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.md/, \"\"),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"posts\",\n  documentTypes: [Post],\n});\n\n```\n\n---\n\n\\*플러그인 :\n\n어떤 특정한 하나의 문제를 해결하기 위한 컴포넌트.\n\n### Next.js 플러그인 설정\n\n- `next.config.js` (선택사항 : 라이브 리로드 및 빌드 설정 활성화)\n\n```css\nconst { withContentlayer } = require(\"next-contentlayer\");\n\nmodule.exports = withContentlayer({\n  // Your Next.js config...\n});\n```\n\n---\n\n### `jsconfig.json` 파일 추가\n\n```css\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"contentlayer/generated\": [\"./.contentlayer/generated\"]\n    }\n  },\n  \"include\": [\".contentlayer/generated\"]\n}\n```\n\n---\n\n- 프로젝트에서 TypeScript 를 사용하는 경우 `**tsconfig.json` 는 이미 추가되어 있다.\\*\\*\n\n```css\n[tsconfig.json] {\n  'compileroptions': {\n    'baseurl': '.',\n    'paths': {\n      // These option allow you to configure module aliases.\n      // So you will import contentlayer generated content from \"contentlayer/generated\" instead of \"./.contentlayer/generated\"\n      +\"contentlayer/generated\": [ './.contentlayer/generated' ];\n    }\n  }\n  ,\"include\": [ 'next-env.d.ts', '**/*.ts', '**/*.tsx', +'.contentlayer/generated'\n      ];\n}\n```\n\n---\n\n## Post 추가하기\n\n1. 앱의 루트에 `post` 폴더를 추가(콘텐츠가 있는 위치)한다.\n2. pre-rendering.`mdx`파일을 추가한다.\n3. 원하는 내용을 추가하면 된다.\n\n---\n\n```css\n[posts/pre-rendering.md]\n---\ntitle: \"Two Forms of Pre-rendering\"\ndate: \"2020-01-01\"\n---\n\nNext.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\n\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\n\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\n```\n\n---\n\n## 게시물 Fetch & display 하기\n\n```css\n[pages/index.js]\nimport Link from \"next/link\";\nimport { allPosts } from \"contentlayer/generated\";\nimport { pick } from \"@contentlayer/client\";\n\nexport default function Home({ posts }) {\n  return (\n    <section>\n      <ul>\n        {posts.map(({ slug, date, title }) => (\n          <li key={slug}>\n            <Link href={`/posts/${slug}`}>\n              <a>{title}</a>\n            </Link>\n            <br />\n            <small>{date}</small>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n\n// Statically fetch all posts\nexport async function getStaticProps() {\n  const posts = allPosts.map((post) => pick(post, [\"title\", \"date\", \"slug\"]));\n\n  return { props: { posts } };\n}\n\n```\n\n---\n\n## 동적 경로 게시물 생성하기\n\n- **`posts/[slug].js`**내부 **`pages`**폴더 를 추가하십시오 .\n\n```css\n[pages/posts/[slug].js]\n\nimport { allPosts } from 'contentlayer/generated'\n\nexport default function Post({ post }) {\n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <div>{post.date}</div>\n\n      <div dangerouslySetInnerHTML={{ __html: post.body.html }} />\n    </article>\n  )\n}\n\nexport async function getStaticPaths() {\n  return {\n    paths: allPosts.map((p) => ({ params: { slug: p.slug } })),\n    fallback: false,\n  }\n}\n\n// Statically fetch post by slug\nexport async function getStaticProps({ params }) {\n  const post = allPosts.find((post) => post.slug === params?.slug)\n\n  return { props: { post } }\n}\n```\n\n[How to setup Contentlayer in your Next.js app? - Imad Atyat-Allah](https://www.imadatyat.me/guides/how-to-setup-contentlayer-in-nextjs#set-up-nextjs-plugin-in-nextconfigjs-optional-enables-live-reload-and-build-setup)\n\n번역\n\n[How to create a Blog with Contentlayer and NextJs](https://www.sandromaglione.com/techblog/contentlayer-blog-template-with-nextjs)\n","code":"var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),f=(t,n)=>{for(var r in n)o(t,r,{get:n[r],enumerable:!0})},s=(t,n,r,a)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let l of u(n))!m.call(t,l)&&l!==r&&o(t,l,{get:()=>n[l],enumerable:!(a=p(n,l))||a.enumerable});return t};var x=(t,n,r)=>(r=t!=null?h(g(t)):{},s(n||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),j=t=>s(o({},\"__esModule\",{value:!0}),t);var i=y((T,c)=>{c.exports=_jsx_runtime});var P={};f(P,{default:()=>S,frontmatter:()=>w});var e=x(i()),w={title:\"ContentLayer \\uC124\\uC815 \\uBC0F \\uC0AC\\uC6A9\\uBC95\",date:new Date(16713216e5),description:\"NextJS / ContentLayer \\uC0AC\\uC6A9\\uBC95\"};function d(t){let n=Object.assign({h3:\"h3\",p:\"p\",hr:\"hr\",ul:\"ul\",li:\"li\",pre:\"pre\",code:\"code\",h2:\"h2\",ol:\"ol\",a:\"a\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h3,{children:\"Contentlayer \\uB780?\"}),`\n`,(0,e.jsx)(n.p,{children:\"| \\uCF58\\uD150\\uCE20\\uB97C \\uB370\\uC774\\uD130\\uB85C \\uBCC0\\uD658\\uD558\\uC5EC \\uC571\\uC5D0\\uC11C MD(X) \\uBC0F CMS \\uCF58\\uD150\\uCE20\\uB97C \\uB9E4\\uC6B0 \\uC27D\\uAC8C \\uAC00\\uC838\\uC62C \\uC218 \\uC788\\uC74C\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{children:\"\\uC790\\uB3D9 \\uC124\\uC815\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"CRA \\uB85C \\uC0DD\\uC131\\uC2DC\"}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-css\",children:`npx create-next-app --example with-contentlayer with-contentlayer-app\n# or\nyarn create next-app --example with-contentlayer with-contentlayer-app\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"\\uC218\\uB3D9\\uC124\\uC815\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"\\uC774\\uBBF8 \\uC571\\uC774 \\uB9CC\\uB4E4\\uC5B4\\uC838 \\uC788\\uC744 \\uACBD\\uC6B0\"}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-css\",children:`npm install contentlayer next-contentlayer\n# or\nyarn add contentlayer next-contentlayer\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h3,{children:\"config \\uCD94\\uAC00\\uD558\\uAE30\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"contentlayer.config.js\"}),\" \\uB2E4\\uC74C \\uCF54\\uB4DC\\uB97C \\uC0AC\\uC6A9\\uD558\\uC694 \\uD504\\uB85C\\uC81D\\uD2B8\\uC758 \\uB8E8\\uD2B8\\uC5D0 \\uD30C\\uC77C\\uC744 \\uB9CC\\uB4E0\\uB2E4.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-css\",children:`[contentlayer.config.js]\n\nimport { defineDocumentType, makeSource } from \"contentlayer/source-files\";\n\nconst Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: \\`**/*.md\\`,\n  contentType: \"markdown\",\n  fields: {\n    title: { type: \"string\", required: true },\n    date: { type: \"string\", required: true },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\\\.md/, \"\"),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"posts\",\n  documentTypes: [Post],\n});\n\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.p,{children:\"*\\uD50C\\uB7EC\\uADF8\\uC778 :\"}),`\n`,(0,e.jsx)(n.p,{children:\"\\uC5B4\\uB5A4 \\uD2B9\\uC815\\uD55C \\uD558\\uB098\\uC758 \\uBB38\\uC81C\\uB97C \\uD574\\uACB0\\uD558\\uAE30 \\uC704\\uD55C \\uCEF4\\uD3EC\\uB10C\\uD2B8.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Next.js \\uD50C\\uB7EC\\uADF8\\uC778 \\uC124\\uC815\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"next.config.js\"}),\" (\\uC120\\uD0DD\\uC0AC\\uD56D : \\uB77C\\uC774\\uBE0C \\uB9AC\\uB85C\\uB4DC \\uBC0F \\uBE4C\\uB4DC \\uC124\\uC815 \\uD65C\\uC131\\uD654)\"]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-css\",children:`const { withContentlayer } = require(\"next-contentlayer\");\n\nmodule.exports = withContentlayer({\n  // Your Next.js config...\n});\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsxs)(n.h3,{children:[(0,e.jsx)(n.code,{children:\"jsconfig.json\"}),\" \\uD30C\\uC77C \\uCD94\\uAC00\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-css\",children:`{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"contentlayer/generated\": [\"./.contentlayer/generated\"]\n    }\n  },\n  \"include\": [\".contentlayer/generated\"]\n}\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"\\uD504\\uB85C\\uC81D\\uD2B8\\uC5D0\\uC11C TypeScript \\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 \\uACBD\\uC6B0 \",(0,e.jsx)(n.code,{children:\"**tsconfig.json\"}),\" \\uB294 \\uC774\\uBBF8 \\uCD94\\uAC00\\uB418\\uC5B4 \\uC788\\uB2E4.**\"]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-css\",children:`[tsconfig.json] {\n  'compileroptions': {\n    'baseurl': '.',\n    'paths': {\n      // These option allow you to configure module aliases.\n      // So you will import contentlayer generated content from \"contentlayer/generated\" instead of \"./.contentlayer/generated\"\n      +\"contentlayer/generated\": [ './.contentlayer/generated' ];\n    }\n  }\n  ,\"include\": [ 'next-env.d.ts', '**/*.ts', '**/*.tsx', +'.contentlayer/generated'\n      ];\n}\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"Post \\uCD94\\uAC00\\uD558\\uAE30\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"\\uC571\\uC758 \\uB8E8\\uD2B8\\uC5D0 \",(0,e.jsx)(n.code,{children:\"post\"}),\" \\uD3F4\\uB354\\uB97C \\uCD94\\uAC00(\\uCF58\\uD150\\uCE20\\uAC00 \\uC788\\uB294 \\uC704\\uCE58)\\uD55C\\uB2E4.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"pre-rendering.\",(0,e.jsx)(n.code,{children:\"mdx\"}),\"\\uD30C\\uC77C\\uC744 \\uCD94\\uAC00\\uD55C\\uB2E4.\"]}),`\n`,(0,e.jsx)(n.li,{children:\"\\uC6D0\\uD558\\uB294 \\uB0B4\\uC6A9\\uC744 \\uCD94\\uAC00\\uD558\\uBA74 \\uB41C\\uB2E4.\"}),`\n`]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-css\",children:`[posts/pre-rendering.md]\n---\ntitle: \"Two Forms of Pre-rendering\"\ndate: \"2020-01-01\"\n---\n\nNext.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\n\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\n\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"\\uAC8C\\uC2DC\\uBB3C Fetch & display \\uD558\\uAE30\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-css\",children:`[pages/index.js]\nimport Link from \"next/link\";\nimport { allPosts } from \"contentlayer/generated\";\nimport { pick } from \"@contentlayer/client\";\n\nexport default function Home({ posts }) {\n  return (\n    <section>\n      <ul>\n        {posts.map(({ slug, date, title }) => (\n          <li key={slug}>\n            <Link href={\\`/posts/\\${slug}\\`}>\n              <a>{title}</a>\n            </Link>\n            <br />\n            <small>{date}</small>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n\n// Statically fetch all posts\nexport async function getStaticProps() {\n  const posts = allPosts.map((post) => pick(post, [\"title\", \"date\", \"slug\"]));\n\n  return { props: { posts } };\n}\n\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"\\uB3D9\\uC801 \\uACBD\\uB85C \\uAC8C\\uC2DC\\uBB3C \\uC0DD\\uC131\\uD558\\uAE30\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"**\",(0,e.jsx)(n.code,{children:\"posts/[slug].js\"}),\"**\\uB0B4\\uBD80\\xA0**\",(0,e.jsx)(n.code,{children:\"pages\"}),\"**\\uD3F4\\uB354 \\uB97C\\xA0\\uCD94\\uAC00\\uD558\\uC2ED\\uC2DC\\uC624 .\"]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-css\",children:`[pages/posts/[slug].js]\n\nimport { allPosts } from 'contentlayer/generated'\n\nexport default function Post({ post }) {\n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <div>{post.date}</div>\n\n      <div dangerouslySetInnerHTML={{ __html: post.body.html }} />\n    </article>\n  )\n}\n\nexport async function getStaticPaths() {\n  return {\n    paths: allPosts.map((p) => ({ params: { slug: p.slug } })),\n    fallback: false,\n  }\n}\n\n// Statically fetch post by slug\nexport async function getStaticProps({ params }) {\n  const post = allPosts.find((post) => post.slug === params?.slug)\n\n  return { props: { post } }\n}\n`})}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://www.imadatyat.me/guides/how-to-setup-contentlayer-in-nextjs#set-up-nextjs-plugin-in-nextconfigjs-optional-enables-live-reload-and-build-setup\",children:\"How to setup Contentlayer in your Next.js app? - Imad Atyat-Allah\"})}),`\n`,(0,e.jsx)(n.p,{children:\"\\uBC88\\uC5ED\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://www.sandromaglione.com/techblog/contentlayer-blog-template-with-nextjs\",children:\"How to create a Blog with Contentlayer and NextJs\"})})]})}function N(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(d,t)})):d(t)}var S=N;return j(P);})();\n;return Component;"},"_id":"31th.mdx","_raw":{"sourceFilePath":"31th.mdx","sourceFileName":"31th.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"31th"},"type":"Post"}},"__N_SSG":true}
{"pageProps":{"snack":{"title":"How to use Atom with Recoil","date":"2022-12-21T00:00:00.000Z","description":"TIL / TypeScript","body":{"raw":"\n### 요구사항\n\n---\n\n1. key : 유일해야한다\n2. default :\n\n---\n\n```tsx\nimport { atom } from 'recoil';\n\nexport const isDarkAtom = atom({\n  key: 'isDark',\n  default: false\n});\n```\n\n[screen/atom.ts]\n\n### App(연결하고자 하는 컴포넌트) 와 Chart 를 atom 과 연결하기\n\n---\n\n- app으로 와서 useRecoilValue 라는 function 을 사용한다.\n\n```tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ThemeProvider } from 'styled-components';\nimport GlobalStyles from './global';\nimport { darkTheme, lightTheme } from './theme';\nimport { RecoilRoot } from 'recoil';\nimport isDark from './App';\nimport { isDarkAtom } from './screens/atoms';\n\nconst queryClient = new QueryClient();\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <ThemeProvider theme={isDark(isDarkAtom) ? darkTheme : lightTheme}>\n          <GlobalStyles />\n          <App></App>\n        </ThemeProvider>\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>\n);\n```\n\n### atom.ts 생성\n\n---\n\n```tsx\nimport { atom } from 'recoil';\n\nexport const isDarkAtom = atom({\n  key: 'isDark',\n  default: true\n});\n```\n\n### 연결할 컴포넌트에 직접 연결\n\n---\n\n```tsx\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchCoinHistory } from '../api';\nimport ApexChart from 'react-apexcharts';\nimport { useOutletContext } from 'react-router';\nimport { useRecoilValue } from 'recoil';\nimport { isDarkAtom } from './atoms';\n\ninterface IHistorical {\n  time_open: number;\n  time_close: number;\n  open: string;\n  high: string;\n  low: string;\n  close: string;\n  volume: string;\n  market_cap: number;\n}\ninterface ChartProps {\n  coinId: string;\n}\nfunction Chart() {\n  const { coinId } = useOutletContext<ChartProps>();\n  const { isLoading, data } = useQuery<IHistorical[]>(['ohlcv', coinId], () =>\n    fetchCoinHistory(coinId)\n  );\n  const isDark = useRecoilValue(isDarkAtom);\n  var ChartOptions = {\n    chart: {\n      type: 'line',\n      height: 300,\n      width: 500,\n      toolbar: {\n        show: false\n      },\n      background: 'transparent'\n    },\n    series: [\n      {\n        name: 'price',\n        data: data?.map((price) => Number(price.close)) as number[]\n      }\n    ],\n    grid: { show: false },\n    stroke: {\n      curve: 'smooth',\n      width: 3\n    },\n    yaxis: {\n      show: false\n    },\n    xaxis: {\n      axisBorder: { show: false },\n      axisTicks: { show: false },\n      labels: { show: false },\n      type: 'datetime',\n      categories: data?.map((price) => price.time_close * 1000) as number[]\n    },\n    fill: {\n      type: 'gradient',\n      gradient: { gradientToColors: ['#42f5ad'], stops: [0, 100] }\n    },\n    colors: ['#f3ffad']\n  };\n\n  return (\n    <div>\n      {isLoading ? (\n        'Loading chart...'\n      ) : (\n        <ApexChart chart={ChartOptions.chart} series={ChartOptions.series} />\n      )}\n    </div>\n  );\n}\nexport default Chart;\n```\n","code":"var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),x=(t,n)=>{for(var r in n)i(t,r,{get:n[r],enumerable:!0})},s=(t,n,r,a)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let o of d(n))!f.call(t,o)&&o!==r&&i(t,o,{get:()=>n[o],enumerable:!(a=p(n,o))||a.enumerable});return t};var y=(t,n,r)=>(r=t!=null?h(u(t)):{},s(n||!t||!t.__esModule?i(r,\"default\",{value:t,enumerable:!0}):r,t)),C=t=>s(i({},\"__esModule\",{value:!0}),t);var l=g((w,c)=>{c.exports=_jsx_runtime});var A={};x(A,{default:()=>R,frontmatter:()=>k});var e=y(l()),k={title:\"How to use Atom with Recoil\",date:new Date(16715808e5),description:\"TIL / TypeScript\"};function m(t){let n=Object.assign({h3:\"h3\",hr:\"hr\",ol:\"ol\",li:\"li\",pre:\"pre\",code:\"code\",p:\"p\",ul:\"ul\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h3,{children:\"\\uC694\\uAD6C\\uC0AC\\uD56D\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsx)(n.li,{children:\"key : \\uC720\\uC77C\\uD574\\uC57C\\uD55C\\uB2E4\"}),`\n`,(0,e.jsx)(n.li,{children:\"default :\"}),`\n`]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-tsx\",children:`import { atom } from 'recoil';\n\nexport const isDarkAtom = atom({\n  key: 'isDark',\n  default: false\n});\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"[screen/atom.ts]\"}),`\n`,(0,e.jsx)(n.h3,{children:\"App(\\uC5F0\\uACB0\\uD558\\uACE0\\uC790 \\uD558\\uB294 \\uCEF4\\uD3EC\\uB10C\\uD2B8) \\uC640 Chart \\uB97C atom \\uACFC \\uC5F0\\uACB0\\uD558\\uAE30\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"app\\uC73C\\uB85C \\uC640\\uC11C useRecoilValue \\uB77C\\uB294 function \\uC744 \\uC0AC\\uC6A9\\uD55C\\uB2E4.\"}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-tsx\",children:`import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ThemeProvider } from 'styled-components';\nimport GlobalStyles from './global';\nimport { darkTheme, lightTheme } from './theme';\nimport { RecoilRoot } from 'recoil';\nimport isDark from './App';\nimport { isDarkAtom } from './screens/atoms';\n\nconst queryClient = new QueryClient();\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <ThemeProvider theme={isDark(isDarkAtom) ? darkTheme : lightTheme}>\n          <GlobalStyles />\n          <App></App>\n        </ThemeProvider>\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>\n);\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"atom.ts \\uC0DD\\uC131\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-tsx\",children:`import { atom } from 'recoil';\n\nexport const isDarkAtom = atom({\n  key: 'isDark',\n  default: true\n});\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"\\uC5F0\\uACB0\\uD560 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uC5D0 \\uC9C1\\uC811 \\uC5F0\\uACB0\"}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-tsx\",children:`import { useQuery } from '@tanstack/react-query';\nimport { fetchCoinHistory } from '../api';\nimport ApexChart from 'react-apexcharts';\nimport { useOutletContext } from 'react-router';\nimport { useRecoilValue } from 'recoil';\nimport { isDarkAtom } from './atoms';\n\ninterface IHistorical {\n  time_open: number;\n  time_close: number;\n  open: string;\n  high: string;\n  low: string;\n  close: string;\n  volume: string;\n  market_cap: number;\n}\ninterface ChartProps {\n  coinId: string;\n}\nfunction Chart() {\n  const { coinId } = useOutletContext<ChartProps>();\n  const { isLoading, data } = useQuery<IHistorical[]>(['ohlcv', coinId], () =>\n    fetchCoinHistory(coinId)\n  );\n  const isDark = useRecoilValue(isDarkAtom);\n  var ChartOptions = {\n    chart: {\n      type: 'line',\n      height: 300,\n      width: 500,\n      toolbar: {\n        show: false\n      },\n      background: 'transparent'\n    },\n    series: [\n      {\n        name: 'price',\n        data: data?.map((price) => Number(price.close)) as number[]\n      }\n    ],\n    grid: { show: false },\n    stroke: {\n      curve: 'smooth',\n      width: 3\n    },\n    yaxis: {\n      show: false\n    },\n    xaxis: {\n      axisBorder: { show: false },\n      axisTicks: { show: false },\n      labels: { show: false },\n      type: 'datetime',\n      categories: data?.map((price) => price.time_close * 1000) as number[]\n    },\n    fill: {\n      type: 'gradient',\n      gradient: { gradientToColors: ['#42f5ad'], stops: [0, 100] }\n    },\n    colors: ['#f3ffad']\n  };\n\n  return (\n    <div>\n      {isLoading ? (\n        'Loading chart...'\n      ) : (\n        <ApexChart chart={ChartOptions.chart} series={ChartOptions.series} />\n      )}\n    </div>\n  );\n}\nexport default Chart;\n`})})]})}function D(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(m,t)})):m(t)}var R=D;return C(A);})();\n;return Component;"},"_id":"34th.mdx","_raw":{"sourceFilePath":"34th.mdx","sourceFileName":"34th.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"34th"},"type":"Post"}},"__N_SSG":true}